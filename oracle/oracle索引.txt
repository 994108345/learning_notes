索引

oracle索引概述

	索引是为了避免全表扫描
	
	B*Tree索引：传统索引
		B*Tree有几种“子类型”
			索引组织表：在B*Tree结构中存储的表。
			B*Tree聚簇索引：是用来索引聚簇码》
			
		反向码索引：这些是码中的字节是“反向”的B*Tree索引，用来通过在整个索引中装入递增的值，来更均匀地分配索引条目。
			
		降序索引：允许数据在索引结构中从“大”到“小”排序，而不是从小到大排序。
		
		位图索引：通常的B*Tree索引中，在索引条目和行之间有一对一的关系。对于位图索引，一个索引条目使用一个位图同时指向多行。
			这对于基本上只读的低基数（数据只有很少几个截然不同的值）数据是合适的。
		
		基于函数的索引：这是一种在行、列中存储函数计算结果的B*Tree或位图索引。
		
		应用程序域索引：这是要么在oracle中，要么甚至可能在oracle外，用来构建和存储本身的索引。
		
		interMedia文本索引：这是一个内置在oracle 中允许关键字搜索大量文本的特殊索引。

B*Tree索引
	
	B*Tree是最常见的索引结构类型。和二叉树相似。目的是最小化oracle查询时间。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
走索引和不走索引

	普通索引(time字段加了普通索引)
		select * from A a where sysdate-a.time < 2;//不走索引
		改
		select * from A a where a.time-sysdate > 0;//走索引 索引字段要放在运算符前面
		
	组合索引(field1和field2字段加了组合索引，field1字段在field2字段的左边)
		select * from A a where a.field2 = '1';、//不走索引
		改
		select * from A a where a.field1 = '1';、//走索引 组合索引必须先用左边的字段
		
		or
			都不走索引，不管用一个字段还是两个字段
			
		and
			只要用了左边的第一个字段，就会走索引
			
	组合索引加普通索引（组合索引为field1和field2，普通索引是id）
		or
			select * from wzl_demo d where d.id = '1' or d.field1 = '2';//走组合索引和普通索引
			select * from wzl_demo d where d.id = '1' or d.field2 = '2';//都不走

			select * from wzl_demo d where d.field1 = '1' or d.id = '2';//走组合索引和普通索引
			select * from wzl_demo d where d.field2 = '1' or d.id = '2';//都不走
			
			当组合索引加普通索引在or语句中，只有or两者都用了正确的索引字段，就都走索引，只要有一方不是正确的索引字段，就都不走索引
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	