二叉树
	左子树的值都小于根节点的值
	右子树的值都大于根节点的值
	它的左右子树也分别为二叉排序树

平衡二叉树
	定义：一棵AVL树是其每个结点的左子树和右子树的高度最多相差1的二叉查找树(空树的高度为-1)
	
红黑树
	在每个结点上增加了一个存储位来表示结点的颜色。red或black
	红黑树确保没有一条路径会比其他路径长两倍，因而是近似于平衡的。
	树中的每个结点有五个属性：color，key，left，right和p，如果一个结点没有子节点或父结点，则该结点相应指针属性为NIL。把NIL视为指向二叉搜索树的叶结点（外部结点）的指针,而把关键字的结点视为树的内部结点。
	
	满足下面五个特点的二叉搜索树，才能算是红黑树
		1 每个结点要么红色，要么黑色
		2 根结点是黑色的
		3 每个叶结点是黑色的
		4 如果一个结点是红色的，则它的两个子节点是黑色的。
		5 对每个结点，从该结点到其所有后代结点的简单路径上，均包含相同数目的黑色结点。
		
	为了方便处理红黑树代码中的边界条件，使用一个哨兵来代表NIL，NIL有下面几个特点
		1 和普通结点有着相同属性的对象
		2 color为black
		3 其他属性key，left，right，p可以设置成任何值
		
	所有的NIL都使用这同一个哨兵，节省空间。
	
	黑高(bh)：
		从某个结点x出发，到达一个结点的任意一条简单路径上的黑色结点个数称为该结点的黑高，记为bh(x).
	
	由上诉特点可以总结出：一棵有n个内部结点的红黑树高度至多为2 lg(n+1)，NIL的黑高为0，
	
	h为树高。黑高至少为h/2，于是有， n>= 2^(h/2) -1 得到 h<=2 lg(n+1)
	
	旋转：
		在执行插入和删除的时候，树的局部结构发生了变化，为了 维护红黑树的性质，要对结果进行调整。
		选择分为左旋和右旋。
		
B树
	1、根结点至少有两个子女；
	2、每个非根节点所包含的关键字个数 j 满足：┌m/2┐ - 1 <= j <= m - 1；
	3、除根结点以外的所有结点（不包括叶子结点）的度数正好是关键字总数加1，故内部子树个数 k 满足：┌m/2┐ <= k <= m 
	4、所有的叶子结点都位于同一层。
	
B+树

B-树