Spring有九大模块
spring容器
spring Context
spring AOP
Spring IOC
spring Web
Spring Orm
Spring Mvc
spring Dao
其中最突出的就是Aop和IOC
Aop：面向方面编程
我们在日常写代码的时候，比如日志记录，是一个很多地方都会用到的代码，但是这个代码缺和我们的业务逻辑无关，我们不想为了记录日志在很多地方都创建日常对象，去记录日志信息，会造成很多重复代码。这也是面向对象编程的弊端，针对这个弊端，spring设计了面向方面的编程，所有的代码中不需要创建日志信息，全部使用spring创建的一个日志对象，经过动态代理的JDK动态代理和CGLIB动态代理，将运行的代码增强，让其调用日志方法。
JDK动态代理要求类不许有接口：实现InvocationHandler（调用处理器） 类，重写invoke方法。
CGLIB动态代理要求类必须没有接口，且不能是final类：实现MethodInterceptor（方法拦截器）类，重写intercept方法。为我们的实现类提供了一个子类，并在子类中采用拦截技术拦截父类的调用，从而达到代理作用。

IOC：控制反转，另外一种说法叫做DI依赖注入
原理：我们日常使用对象时，都是我们手动去创建对象，使用spring框架后，不需要我们去创建对象，而是由spring容器去创建对象，我们只需要再配置文件里配置要生成对象的信息即可，spring会根据我们配置的类的全限定类名信息通过反射去调用。同时spring默认保持着单例创建。通过这种方式，达到对象之间的解耦。
缺点：反射创建对象相对直接创建对象，还是比较慢的。
Ioc的一个重点就是DI依赖注入：即A对象再运行的时候需要B对象，但是B对象不需要A创建，且B也不需要知道A什么时候被创建。A创建是Spring来实现的，而且是在系统运行的时候，Speing会在适当的时候创建一个A对象。而实现DI就是反射技术。


