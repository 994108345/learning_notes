1 Spring-cloud：微服务架构
	介绍：建一个独立的 系统拆分成多个小型服务，服务之间通信基于HTTP的restful api进行通信写作。
	
	和单体系统的对比
		庞大臃肿，更新维护困难。
		
	微服务的优点和缺点
		缺点：
			运维的新挑战：进程数量大大增加
			接口的一致性：修改其中一个接口时，与其相关联的服务都要修改调用的接口
			分布式的复杂性：服务更多，所以分布式会更复杂，比如网络延迟，分布式事务等等
			
		优点
			服务组件化：各服务可以快速升级。
			按业务组织团队：
			去中心化处理：各个服务，尽量解耦
			智能端点与哑管道
				使用Http的Restful api的发送协议
				使用消息中间件
			
2 使用spring boot
	目的：通过大量自动化的配置方式来简化spring原有样板化的配置，使得开发者可以快速构建应用。
			通过Starter POMS的定义，让我们整合各项功能时，不需要在Maven的pom中维护依赖关系，直接通过Starter模块定义来引用，使得管理工作变得简单

	2.1快速入门
		
	Spring-boot-actuator
	
		原生端点
			应用配置类：应用中的配置信息、环境变量、自动化配置报告等配置信息
			度量指标类：监控统计信息，例如内存信息，线程池、Http请求统计等
			操作控制类：对应用的关闭等操作类功能
		
3 spring cloud EureKa
	
	介绍：Spring cloud Eureka是spring cloud netfix微服务套件中的一部分，它基于Netfix Eureka做了二次封装，主要负责完成微服务架构中的服务治理功能
	
	3.1 服务治理：
		
		服务治理是最核心的基础模块，用来实现各个微服务实例的自动化注册与发现。
		
		服务注册：
		服务发现：
	
	3.2 Netfix EureKa
		
		使用NetFix Eureka来实现服务的注册与发现，包含了服务端组件，也包含了客户端组件，且是用java语言编写的，Eureka使用与java实现分布式系统。
		EureKa服务端的服务治理机制提供了完备的RESTful API，所以也支持非java语言的微服务。
		
		Eureka服务端：服务注册中心，
			如果是集群模式部署，如果分片出现故障，那么会进入自我保护模式，允许分片在故障期间提供服务的注册和发现，当故障解决后，再同步其他分片的状态。
		
		Eureka客户端：处理服务的注册和发现
	
	3.3 EureKa详解
	
	基础架构
	
		服务注册中心
		
		服务提供者
		
		服务消费者
	
	服务治理机制
		
		服务提供者
		
			服务注册
			
				服务提供者启动时，发送REST请求到Eureka Server上，将数据存到一个双层机构的Map中，其中第一层的key是服务名，第二层的key是具体服务的实例名
				
			服务同步
				
				由于服务注册中心之间因互相注册为服务，服务提供者发送注册请求到一个服务注册中心时，它会将请求转发给集群中相连的其他注册中心，从而实现注册中心之间的服务同步。
				
			服务续约
				
				服务提供者会维护一个心跳用来持续告诉Eureka Server，我还活着，防止Eureka Server剔除任务。
				
					eureka.instance.lease-renewal-interval-in-seconds=30//服务续约任务的调用间隔时间
					eureka.instance.lease-expiration-duration-in-seconds=90//定义服务失效的时间

		服务消费者
		
			获取服务
				
				服务消费者，发送一个REST请求个服务注册中心。来获取上面注册的服务清单，为了性能考虑，Eureka Server会维护一份只读的服务清单来返回给客户端，同事该缓存清单每隔30秒回更新一次
				
				eureka.client.fetch-registry=true//默认是true
				eureka.client.registry-fetch-interval-seconds=30//默认30，更新服务清单时间
				
			服务调用
			
				Ribbon默认使用轮询方式调用，从而实现客户端的负载均衡
				
				对于访问实例的选择
				
					Region和Zone的概念，一个Regin中可以包含多个Zone，每个服务客户端需要被注册到一个Zone中，每个客户端对应一个Region和一个Zone。服务嗲用时，有限访问同一个Zone中的服务提供方，若访问不到，就访问其他的Zone。
					
			服务下线
				
				当服务实例进行正常的关闭操作时，触发一个服务下线的Rest请求给Eureka Server。服务中心会将该服务下线，并把下线事件传播出去。
				
		服务注册中心
		
			失效剔除 
				
				服务不能正常运行时，会会剔除。默认每隔60秒将当前清单超时默认90秒的服务剔除。
				
			自我保护
				
				对于15分钟内心跳低于百分之85的服务，Erureka Server会将这些服务保护起来，让这些服务不过期，如果这期间服务确实挂了，那么客户端很可能拿到已经不存在的服务实例。
				euraka.server.enable-self-preservation = false;参数来关闭保护机制。以确保注册中心可以将不可用的实例正确剔除
				
	源码分析
		我们将服务注册到注册中心时，或者是从Eureka Server中获取服务列表时，主要就做了两件事情
			1 在应用主类中配置@EnableDiscoverClient注解
			2 在application.properties中庸eureka.client.serviceUrl.defaultZone参数指定了服务注册中心的位置。
		DiscoverClient抽象类中定义了用来发现服务的抽象方法:所以Spring Cloud构建的微服务可以方便的切换不同的微服务治理框架而不改程序代码，只需要添加一些针对服务治理框架的配置即可。
		
		Eureka Server负责的任务
			向Eureka Server注册服务实例
			向Eureka Server服务租约
			当服务关闭期间，向Eureka Server取消租约
			查询Eureka Server中的服务实例列表
			Eureka Client还需要配置一个Eureka Server的URL列表
			 
		Region和Zone是一对多的关系。
		一个微服务只会属于一个Region
		Zone可以配置多个，但是需要逗号分隔开。
		
		通过Region和Zone的互相配置，实现区域性的容错集群，和区域亲和特性。
			微服务应用中使用Ribbon来实现服务调用时，Ribbon的默认策略会优先访问同客户端处在于一个Zone中的服务端实例，只有当同一个Zone中没有可用服务实例的时候才会访问其他Zone中的实例。
			
	配置详解
		
		Eureka的服务治理体系中，主要分为服务端与客户端两个角色，服务端为服务注册中心，客户端就是各个微服务应用。
	
	跨平台姓
				
			
		
		
			
Eureka:负载的服务器
RestTemplate+ribbon:负载均衡
Feign：负载均衡
Hystrix:短路控制
zuul:路由解析管理



Rest简介：REST其实是一种组织Web服务的架构，没有要求一定要使用HTTP来实现。
	REST是一种组织Web服务的架构，其只在架构方面提出了一系列约束。

REST系统所需要具有的HATEOAS（Hypermedia As The Engine Of Application State：超媒体作为机器的应用状态）特性

rest的约束

	1、使用客户/服务器模型。客户和服务器之间通过一个统一的接口来互相通讯。
	2、层次化的系统。在一个REST系统中，客户端并不会固定地与一个服务器打交道。
	3、无状态。在一个REST系统中，服务端并不会保存有关客户的任何状态。也就是说，客户端自身负责用户状态的维持，并在每次发送请求时都需要提供足够的信息。
	4、可缓存。REST系统需要能够恰当地缓存请求，以尽量减少服务端和客户端之间的信息传输，以提高性能。
	5、统一的接口。一个REST系统需要使用一个统一的接口来完成子系统之间以及服务与用户之间的交互。这使得REST系统中的各个子系统可以独自完成演化。
		
	如果一个系统满足了上面所列出的五条约束，那么该系统就被称为是RESTful的。

Rest的两个重要概念
	
	资源：REST系统的核心概念。所有的设计都以资源为中心，对资源新型增删改查等。
	状态：资源本身拥有一系列状态，对资源增删改查的时候，这种状态就会转换。

统一接口的子约束
	1、每个资源都拥有一个资源标识。每个资源的资源标识可以用来唯一地标明该资源。
	2、消息的自描述性。在REST系统中所传递的消息需要能够提供自身如何被处理的足够信息。例如该消息所使用的MIME类型，是否可以被缓存等。	3、资源的自描述性。一个REST系统所返回的资源需要能够描述自身，并提供足够的用于操作该资源的信息，如如何对资源进行添加，删除以及修改等操作。也就是说，一个典型的REST服务不需要额外的文档对如何操作资源进行说明。	4、HATEOAS。即客户只可以通过服务端所返回各结果中所包含的信息来得到下一步操作所需要的信息，如到底是向哪个URL发送请求等。也就是说，一个典型的REST服务不需要额外的文档标示通过哪些URL访问特定类型的资源，而是通过服务端返回的响应来标示到底能在该资源上执行什么样的操作。一个REST服务的客户端也不需要知道任何有关哪里有什么样的资源这种信息。


HTTP/1.1 200 OK
Content-Type: application/json   
Content-Length: xxx

{
   "version": "1.0",
   "resources": [
      {
         "label" : "Categories",
         "description" : "Product categories",
         "uri": "/api/categories"
      }, {
         "label" : "Items",
         "description" : "All items on sell",
         "uri": "/api/items"
      }
   ]
}

资源识别

	资源分为主资源和子资源
	
		主资源实际上就是能够独立存在的一系列资源。
			
			如果一个资源是主资源，那么其可以被不同的资源实例包含引用而不会产生歧义。
			
		子资源则需要依附于主资源之上才能表达实际的意义，各个子资源也可能拥有自身的子资源。
		
			判断一个资源是否是子资源的一个方法就是看它是否能独立地表示其具体含义。
			
			而如果一个资源是子资源，那么被不同的资源实例引用可能会产生歧义。
			
	判断定义的资源是否合理
		
		考虑对该资源的CURD是否有意义。
		
		检查资源是否还需除CRUD之外的动作。
		
资源的URL设计

	在HTTP中，一个URL主要由以下几个部分组成：

		1 协议。即HTTP以及HTTPS。
		
		2 主机名和端口。如www.egoods.com:8421
		
		3 资源的相对路径。如/api/categories。
		
		4 请求参数。即由问号开始的由键值对组成的字符串：?page=1&page_size=20

	单数 vs. 复数

	相对路径 vs. 请求参数

使用合适的动词
	
	给每个资源定义好URL后，需要决定如何操作这些资源

	
	post和put
	
		POST动词会在目标URI之下创建一个新的子资源。例如在向服务端发送下面的请求时，REST系统将创建一个新的分类：
		
			POST /api/categories
			Host: www.egoods.com
			Authorization: Basic xxxxxxxxxxxxxxxxxxx
			Accept: application/json
			
			{
			"label" : "Electronics",
			……
			}
				
		PUT则是根据请求创建或修改特定位置的资源。此时向服务端发送的请求的目标URI需要包含所处理资源的ID：
		
			POST /api/categories/8fa866a1-735a-4a56-b69c-d7e79896015e
			Host: www.egoods.com
			Authorization: Basic xxxxxxxxxxxxxxxxxxx
			Accept: application/json
			
			{
			"label" : "Electronics",
			……
			}
	
		由于在同一个URI上调用两次PUT所得到的结果相同。因此用户在没有接到PUT请求响应时可以放心地重复发送该响应。这在网络丢包较为严重时是一个非常好的功能。反过来，在同一个URI上调用两次POST将可能创建两个独立的子资源。
	
	PUT和PATCH
		
		两者之间的不同则在于PUT是对整个资源的更新，而PATCH则是对部分资源的更新。而该动词的局限性则在于对该动词的支持程度。毕竟在某些类库中并没有提供原生的对PATCH动词的支持。
	
使用标准的状态码
		
	设计一个REST服务时，我们需要额外地注意是否返回了正确的状态码。
	
	例子密码错误：
	
		HTTP/1.1 400 Bad Request
		Content-Type: application/json
		Content-Length: xxx
		
		{
		"error_id" : "100045",
		"header" : "Reset password failed",
		"description" : "The original password is not correct"
		}		
	
	因为http给的状态码无法满足我们的需求，我们要知道具体什么错误，要自己设计错误信息，传回前端
	
选择适当的表示结构
		
	为资源定义一个恰当的表示
	
		使用json或xml甚至是自定义MIME类型来表示资源
	
负载的自描述性
		
	些基于HTTP的REST系统中，用来作为资源标识的常常是该资源的ID
	
	个人更倾向于使用URL的原因则是：在某些情况下，如对某个资源定时刷新以进行监控的时候，URL可以直接被使用。
	
无状态约束
	
	因为是分布式的，多台服务器，如果状态存在服务端，那么需要同步状态到其他服务器上，这在实现上很棘手。
	
Authentication
	
	传统的登录都是讲账号密码存在会话中，所以对于无状态约束，这是一种不好的现象，为了解决这种情况，每次请求后台的时候都将账号密码发送给服务器。
	
版本管理

	对于一个基于HTTP的REST服务而言，软件开发人员需要遵守如下的守则以保持API的后向兼容性：

		1 不能在请求中添加新的必须的参数。
		
		2 不能更改操作资源的动词。
		
		3 不能更改响应的HTTP status。
	
性能	
	
	在基于HTTP的REST服务中，性能提升主要分为两个方面：REST架构本身在提高性能方面做出的努力，以及基于HTTP协议的优化。
	
	
CAP理论
	定义：CAP原则又称CAP定理，指的是在一根分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可兼得。
	
Eureka与zk进行对比
	ZK讲究CP，Eureka看重AP。
	Zk的的服务器分为leader和follower还有observe，三种，其他两种服务器都是从leader上复制数据到自己身上，所以，所有的数据以leader为准。一旦leader挂掉，会进入选举模式，此时不接受服务注册请求，在follower里面选举leader，observe没有选举权。选举出来后，再把选举后的leader的数据同步到其他所有机器上，这样就保持了数据无论何时都是一致的。且当挂掉的服务数目少于一半的服务器数目，该zk集群就还可以执行 。
	
	Eureka服务器挂掉时，也会进入保护模式，依然会保存注册的信息，而zk是一旦这台服务器挂了，zk集群立马就会将该结点剔除，外部就无法访问该结点，也就无法注册服务信息。
	
	Eureka的所有服务器都是平级的，没有主从关系，只是互相同步信息，且同步信息都是在一固定时间间隔同步，且同步状态时是异步的，所以不能保持一致性，但是可以保证最终的一致性，
	
	
	
	
	
	
	
	
	
	
	
	