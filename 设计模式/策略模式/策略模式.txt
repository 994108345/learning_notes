策略模式的定义：
	定义了算法族，分别封装。让他们之间类互相替换。次模式让算法的变化独立于使用算法的客户。
首先：我们来说一个例子。
鸭子游戏：创建一群会飞会叫的鸭子
1.创建一个父类鸭子Duck，有fly()和quack()方法，创建子类（例：GreenDuck和RedDuck）继承父类Duck就可以创建一群会飞会叫的鸭子。
2.现在要加一个新种类橡皮鸭，橡皮鸭不会fly()。所以一开始的继承是无法满足我们的需求。
3.很多人会想到用接口，将fly()写成接口，谁需要，谁就去实现接口。这样的结果就是我们要判断什么方法是共有的什么是特有的，、。，假如我再加一种铁皮鸭子，不会fly()也不会quack()。那么又要把quack()剥离出来写成接口，这样写要一直改变结构太麻烦了。如果是几十种Duck，呢那工作量相当大。
4.这个时候把我们把变化的功能独立出来。拿fly为例子，写一个接口FlyBehavior,有fly()，将FlyWithWings和NoFly写成两个类，实现FlyBehavior接口。这里大家可能会疑惑，为什么不用抽象类而用接口。因为抽象类是硬编程，在创建对象的时候就要求确定是什么对象。而接口可以灵活使用多态，在调用方法时再确定用很么对象去调用。
5.将FlyBehavior写成父类Duck的一个属性。并且封装。在ModelDuck中创建一个对应FlyBehavior,然后调用对应的方法。