jdk8的新特性，我们来聊聊下面几个。

	Lambda 表达式 − Lambda允许把函数作为一个方法的参数（函数作为参数传递进方法中。

	方法引用 − 方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码。

	默认方法 − 默认方法就是一个在接口里面有了一个实现的方法。

	新工具 − 新的编译工具，如：Nashorn引擎 jjs、 类依赖分析器jdeps。

	Stream API −新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中。

	Date Time API − 加强对日期与时间的处理。

	Optional 类 − Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常。

	Nashorn, JavaScript 引擎 − Java 8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的javascript应用。
	
编程风格：java 8 希望有自己的编程风格，并与 Java 7 区别开。
	
	
Lambda 表达式
	也可称为闭包，它是推动java8发布的最重要的新特性。
	Lambda允许把函数作为一个方法的参数。
	使用Lambda表达式可以使代码变得更加简洁紧凑。
	
	语法：
		(parameters) -> expression
		或
		(parameters) ->{ statements; }
	
		lambda的重要特征
			可选类型声明：不需要声明参数类型，编译器可以统一识别参数值
			可选的参数圆括号：一个参数无需定义圆括号，但多个参数需要定义圆括号。
			可选的大括号：如果主体包含了一个语句，就不需要使用大括号。
			可选的返回关键字：如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定表达式返回一个数值。
			
		使用Lambda表达式需要注意以下两点
			Lambda 表达式主要用来定义行内执行的方法类型接口，例如，一个简单方法接口。在上面例子中，我们使用各种类型的Lambda表达式来定义MathOperation接口的方法。然后我们定义了sayMessage的执行。
			Lambda 表达式免去了使用匿名方法的麻烦，并且给予Java简单但是强大的函数化的编程能力。

	代码：
	public static void main(String[] args) {
			LambdaTest lambdaTest = new LambdaTest();
			MathOperation mathOperation = (int a,int b) -> a + b;

			MathOperation noType = (a,b)-> a - b;

			MathOperation multiplication = (int a, int b) ->{return a * b;};

			MathOperation division = (int a,int b) -> a / b;

			System.out.println("10 + 5 = " + lambdaTest.operate(10, 5, mathOperation));
			System.out.println("10 - 5 = " + lambdaTest.operate(10, 5, noType));
			System.out.println("10 x 5 = " + lambdaTest.operate(10, 5, multiplication));
			System.out.println("10 / 5 = " + lambdaTest.operate(10, 5, division));

			GreetingService greetingService = message -> System.out.println("hello" + message);

			GreetingService greetingService1 = (message) -> System.out.println("Hello" + message);

			greetingService.sayMessage("Runoob");
			greetingService1.sayMessage("Google");
		}

		interface MathOperation{
			int operation(int a, int b);
		}
		interface GreetingService {
			void sayMessage(String message);
		}

		private int operate(int a, int b, MathOperation mathOperation){
			return mathOperation.operation(a, b);
		}
	}
			
	变量作用域
		lambda 表达式只能引用标记了 final 的外层局部变量，这就是说不能在 lambda 内部修改定义在域外的局部变量，否则会编译错误。
		lambda 表达式的局部变量可以不用声明为 final，但是必须不可被后面的代码修改（即隐性的具有 final 的语义）
		在 Lambda 表达式当中不允许声明一个与局部变量同名的参数或者局部变量。
		
方法引用
	方法引用通过方法的名字来指向一个方法。

	方法引用可以使语言的构造更紧凑简洁，减少冗余代码。

	方法引用使用一对冒号 :: 。即类名::方法名
	
	代码：
	public class Java8Tester {
		public static void main(String[] args) {
			List names = new ArrayList<>();
			names.add("goole");
			names.add("runoob");
			names.add("taobao");
			names.add("baidu");
			names.add("sina");
			names.forEach(Java8Tester::write);
		}
		public static  void write(Object a){
			System.out.println("我也不知道"+a);
		}
	}

函数式接口
	函数式接口(Functional Interface)就是一个有且仅有一个抽象方法，但是可以有多个非抽象方法的接口。

	函数式接口可以被隐式转换为lambda表达式。

	函数式接口可以现有的函数友好地支持 lambda。
	
	例子代码：
	public class Java8Tester {
		public static void main(String[] args) {
			Java8Tester java8Tester = new Java8Tester();
			/*即把方法的实现代码传入*/
			java8Tester.eval(1111,n->n==1211);
		}
		public void eval(Integer a,Predicate<Integer> predicate){
			if(predicate.test(a)){
				System.out.println("里");
			}else{
				System.out.println("外");
			}
		}
	}	


默认方法
	简单说，默认方法就是接口可以有实现方法，而且不需要实现类去实现其方法。

	我们只需在方法名前面加个default关键字即可实现默认方法。
	
	语法
		public interface Vehicle {
		   default void print(){
			  System.out.println("我是一辆车!");
		   }
		}
	
	创建自己的默认方法，来覆盖重写接口的默认方法：
	使用 super 来调用指定接口的默认方法：

	静态默认方法
		Java 8 的另一个特性是接口可以声明（并且可以提供实现）静态方法。例如：
			public interface Vehicle {
			   default void print(){
				  System.out.println("我是一辆车!");
			   }
				// 静态方法
			   static void blowHorn(){
				  System.out.println("按喇叭!!!");
			   }
			}	

Stream
	Java 8 API添加了一个新的抽象称为流Stream，可以让你以一种声明的方式处理数据。
	Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象。

	Stream API可以极大提高Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。

	这种风格将要处理的元素集合看作一种流， 流在管道中传输， 并且可以在管道的节点上进行处理， 比如筛选， 排序，聚合等。

	元素流在管道中经过中间操作（intermediate operation）的处理，最后由最终操作(terminal operation)得到前面处理的结果。
	
	什么是Stream
		
		Stream（流）是一个来自数据源的元素队列并支持聚合操作
			元素是特定类型的对象，形成一个队列。 Java中的Stream并不会存储元素，而是按需计算。
			数据源 流的来源。 可以是集合，数组，I/O channel， 产生器generator 等。
			聚合操作 类似SQL语句一样的操作， 比如filter, map, reduce, find, match, sorted等。
		
		和以前的Collection操作不同， Stream操作还有两个基础的特征：
			Pipelining: 中间操作都会返回流对象本身。 这样多个操作可以串联成一个管道， 如同流式风格（fluent style）。 这样做可以对操作进行优化， 比如延迟执行(laziness)和短路( short-circuiting)。
			内部迭代： 以前对集合遍历都是通过Iterator或者For-Each的方式, 显式的在集合外部进行迭代， 这叫做外部迭代。 Stream提供了内部迭代的方式， 通过访问者模式(Visitor)实现。
		
	生成流
		在 Java 8 中, 集合接口有两个方法来生成流：
			stream() − 为集合创建串行流。

			parallelStream() − 为集合创建并行流。
			
		测试代码:
		List<String> strings = Arrays.asList("abc", "", "bc", "efg", "abcd","", "jkl");
		List<String> filtered = strings.stream().filter(string -> !string.isEmpty()).collect(Collectors.toList());
		filtered.forEach(System.out::print);
	
	forEach	
		Stream 提供了新的方法 'forEach' 来迭代流中的每个数据。以下代码片段使用 forEach 输出了10个随机数：
			Random random = new Random();
			random.ints().limit(10).forEach(System.out::println);
			
	map
		map 方法用于映射每个元素到对应的结果，以下代码片段使用 map 输出了元素对应的平方数：
			List<Integer> numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);
			// 获取对应的平方数
			List<Integer> squaresList = numbers.stream().map( i -> i*i).distinct().collect(Collectors.toList());	
			
	filter
		filter 方法用于通过设置的条件过滤出元素。以下代码片段使用 filter 方法过滤出空字符串：
			List<String>strings = Arrays.asList("abc", "", "bc", "efg", "abcd","", "jkl");
			// 获取空字符串的数量
			int count = strings.stream().filter(string -> string.isEmpty()).count();		
		
	limit
		limit 方法用于获取指定数量的流。 以下代码片段使用 limit 方法打印出 10 条数据：	
			Random random = new Random();
			random.ints().limit(10).forEach(System.out::println);	

	sorted
		sorted 方法用于对流进行排序。以下代码片段使用 sorted 方法对输出的 10 个随机数进行排序：
			Random random = new Random();
			random.ints().limit(10).sorted().forEach(System.out::println);		

	并行（parallel）程序
		parallelStream 是流并行处理程序的代替方法。以下实例我们使用 parallelStream 来输出空字符串的数量：
			List<String> strings = Arrays.asList("abc", "", "bc", "efg", "abcd","", "jkl");
			// 获取空字符串的数量
			int count = strings.parallelStream().filter(string -> string.isEmpty()).count();
	
	Collectors
		Collectors 类实现了很多归约操作，例如将流转换成集合和聚合元素。Collectors 可用于返回列表或字符串：
			List<String>strings = Arrays.asList("abc", "", "bc", "efg", "abcd","", "jkl");
			List<String> filtered = strings.stream().filter(string -> !string.isEmpty()).collect(Collectors.toList());
			 
			System.out.println("筛选列表: " + filtered);
			String mergedString = strings.stream().filter(string -> !string.isEmpty()).collect(Collectors.joining(", "));
			System.out.println("合并字符串: " + mergedString);		

	统计
		另外，一些产生统计结果的收集器也非常有用。它们主要用于int、double、long等基本类型上，它们可以用来产生类似如下的统计结果。
			List<Integer> numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);
			 
			IntSummaryStatistics stats = integers.stream().mapToInt((x) -> x).summaryStatistics();
			 
			System.out.println("列表中最大的数 : " + stats.getMax());
			System.out.println("列表中最小的数 : " + stats.getMin());
			System.out.println("所有数之和 : " + stats.getSum());
			System.out.println("平均数 : " + stats.getAverage());	

option类
	Optional 类是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。

	Optional 是个容器：它可以保存类型T的值，或者仅仅保存null。Optional提供很多有用的方法，这样我们就不用显式进行空值检测。

	Optional 类的引入很好的解决空指针异常。

	类声明
		以下是一个 java.util.Optional<T> 类的声明：
		public final class Optional<T> extends Object
		
	Optional实例
		
Java 8 Nashorn JavaScript
	从JDK 1.8开始，Nashorn取代Rhino(JDK 1.6, JDK1.7)成为Java的嵌入式JavaScript引擎。Nashorn完全支持ECMAScript 5.1规范以及一些扩展。它使用基于JSR 292的新语言特性，其中包含在JDK 7中引入的 invokedynamic，将JavaScript编译成Java字节码。与先前的Rhino实现相比，这带来了2到10倍的性能提升。
	
Java 8 日期时间 API
	Java 8通过发布新的Date-Time API (JSR 310)来进一步加强对日期与时间的处理。

	在旧版的 Java 中，日期时间 API 存在诸多问题，其中有：

		非线程安全 − java.util.Date 是非线程安全的，所有的日期类都是可变的，这是Java日期类最大的问题之一。

		设计很差 − Java的日期/时间类的定义并不一致，在java.util和java.sql的包中都有日期类，此外用于格式化和解析的类在java.text包中定义。java.util.Date同时包含日期和时间，而java.sql.Date仅包含日期，将其纳入java.sql包并不合理。另外这两个类都有相同的名字，这本身就是一个非常糟糕的设计。

		时区处理麻烦 − 日期类并不提供国际化，没有时区支持，因此Java引入了java.util.Calendar和java.util.TimeZone类，但他们同样存在上述所有的问题。

	Java 8 在 java.time 包下提供了很多新的 API。以下为两个比较重要的 API：

		Local(本地) − 简化了日期时间的处理，没有时区的问题。

		Zoned(时区) − 通过制定的时区处理日期时间。		
	
	新的java.time包涵盖了所有处理日期，时间，日期/时间，时区，时刻（instants），过程（during）与时钟（clock）的操作。		
		
Java8 Base64
	在Java 8中，Base64编码已经成为Java类库的标准。

	Java 8 内置了 Base64 编码的编码器和解码器。

	Base64工具类提供了一套静态方法获取下面三种BASE64编解码器：

		基本：输出被映射到一组字符A-Za-z0-9+/，编码不添加任何行标，输出的解码仅支持A-Za-z0-9+/。
		URL：输出映射到一组字符A-Za-z0-9+_，输出是URL和文件。
		MIME：输出隐射到MIME友好格式。输出每行不超过76字符，并且使用'\r'并跟随'\n'作为分割。编码输出最后没有行分割。
		