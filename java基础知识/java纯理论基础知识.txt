面向对象的设计原则
	面向对象七大设计原则
	1、  开闭原则：软件实体应该对扩展开放，对修改关闭。开闭原则是设计原则的核心原则，其他的设计原则都是开闭原则表现和补充。实现开闭原则的方法就是抽象。 

	2、  里氏替换原则：在任何父类出现的地方都可以用他的子类来替代（子类应当可以替换父类并出现在父类能够出现的任何地方）

	3、  单一职责原则：一个类只应该做和一个职责相关的事情，不要把过多的业务放在一个类中完成。 

	4、  接口隔离原则：使用专门的接口，比用统一的接口要好。便于分工，在实现接口时，不应该看到自己不用关心的方法。 

	5、  依赖倒置原则：面向抽象编程，不要面向具体编程。 

	6、  迪米特原则：软件实体之间应该做到最少的交互。不要和陌生人说话。调用方只关心他需要使用的方法 

	7、组合/聚合复用原则：多使用聚合/组合达到代码的重用，少使用继承复用。 

	
	
面向对象的四大特性
	封装：是一种隐藏信息的特性。找到变化并且把它封装起来，你就可以在不影响其它部分的情况下修改或扩展被封装的变化部分，这是所有设计模式的基础，就是封装变化，因此封装的作用，就解决了程序的可扩展性。 

	抽象：在使用面向对象的方法设计一个软件系统时，首先就要区分出现实世界中的事物所述的类型，分析它们拥有哪些性质与功能，再将它们抽象为在计算机虚拟世界中才有意义的实体——类，在程序运行时，由类创建出对象，用对象之间的相互合作关系来模拟真实世界中事物的相互关联。

	继承：子类继承父类，可以继承父类的方法及属性，实现了多态以及代码的重用，因此也解决了系统的重用性和扩展性，但是继承破坏了封装，因为他是对子类开放的，修改父类会导致所有子类的改变，因此继承一定程度上又破坏了系统的可扩展性，所以继承需要慎用，只有明确的IS-A关系才能使用，同时继承在在程序开发过程中重构得到的，而不是程序设计之初就使用继承，很多面向对象开发者滥用继承，结果造成后期的代码解决不了需求的变化了。因此优先使用组合，而不是继承，是面向对象开发中一个重要的经验。 

	多态：接口的多种不同的实现方式即为多态。接口是对行为的抽象，刚才在封装提到，找到变化部分并封装起来，但是封装起来后，怎么适应接下来的变化？这正是接口的作用，接口的主要目的是为不相关的类提供通用的处理服务,我们可以想象一下。比如鸟会飞，但是超人也会飞，通过飞这个接口，我们可以让鸟和超人，都实现这个接口，这就实现了系统的可维护性，可扩展性。 