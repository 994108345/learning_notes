ConcurrentHashMap

类结构：

	public class ConcurrentHashMap<K, V> extends AbstractMap<K, V>
			implements ConcurrentMap<K, V>, Serializable

成员变量：

	static final int DEFAULT_INITIAL_CAPACITY = 16;//默认初始容量
	
	static final float DEFAULT_LOAD_FACTOR = 0.75f;//默认负载因子
	
	static final int RETRIES_BEFORE_LOCK = 2;//重试加锁的次数

	static final int MAX_SEGMENTS = 1 << 16;//最大的分个数
	
	static final int MIN_SEGMENT_TABLE_CAPACITY = 2;//每个分割表的最小容量
	
	static final int MAXIMUM_CAPACITY = 1 << 30;//最大容量
	
	static final int DEFAULT_CONCURRENCY_LEVEL = 16;//默认并发级别
	
	final int segmentMask;//
	
构造方法:
	
	public ConcurrentHashMap(int initialCapacity,
                             float loadFactor, int concurrencyLevel) {
        if (!(loadFactor > 0) || initialCapacity < 0 || concurrencyLevel <= 0)
            throw new IllegalArgumentException();
        if (concurrencyLevel > MAX_SEGMENTS)
            concurrencyLevel = MAX_SEGMENTS;
        // Find power-of-two sizes best matching arguments
        int sshift = 0;
        int ssize = 1;
        while (ssize < concurrencyLevel) {
            ++sshift;
            ssize <<= 1;
        }
        this.segmentShift = 32 - sshift;
        this.segmentMask = ssize - 1;
        if (initialCapacity > MAXIMUM_CAPACITY)
            initialCapacity = MAXIMUM_CAPACITY;
        int c = initialCapacity / ssize;
        if (c * ssize < initialCapacity)
            ++c;
        int cap = MIN_SEGMENT_TABLE_CAPACITY;
        while (cap < c)
            cap <<= 1;
        // create segments and segments[0]
        Segment<K,V> s0 =
            new Segment<K,V>(loadFactor, (int)(cap * loadFactor),
                             (HashEntry<K,V>[])new HashEntry[cap]);
        Segment<K,V>[] ss = (Segment<K,V>[])new Segment[ssize];
        UNSAFE.putOrderedObject(ss, SBASE, s0); // ordered write of segments[0]
        this.segments = ss;
    }
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	