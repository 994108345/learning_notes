5 调优案例分析与实战
5.1 概述
5.2 案例分析
5.2.1 高性能硬件上的程序部署策略
	案例描述：一个在线文档类型网站，四个CPU、16GB物理内存，操作系统为64位，Resin作为web服务器。通过-Xmx和-Xms将java堆固定在12GB。使用一段时间后，发现经常不定期出现长时间没有响应的现象。原因是因为GC停顿，虚拟机默认使用吞吐量优先收集器，回收12GB的堆，一次Full GC的停顿时间高达啊14秒。因为程序设计关系，访问文档要把文档从磁盘读取到内存中，导致内存中出现许多由文档序列化产生的大对象，大对象很多都进入老年代，没有在MinorGC中清理掉。所以12GB的堆很快就消耗殆尽，所以就会经常性的引发FULL gc
	在高性能硬件上不熟程序，目前主要有两种方式：
	1：通过64位JDK来使用大内存
	2：使用若干个32位虚拟机建立逻辑集群来利用硬件资源。
5.2.2 集群间同步导致内存溢出
	除了java永久代之外，我们注意到下面这些区域还会占用较多的内存，这里所有的内存总和会收到操作系统进程最大内存的限制。
5.2.3 堆外内存导致的溢出错误
	Direct Memory：
	线程堆栈
	Socket缓存区
	JNI代码
	虚拟机和GC
5.2.4 外部命令导致系统缓慢
5.2.5 服务器JVM进程崩溃


	
	